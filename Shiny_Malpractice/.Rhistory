model1 = lm(medv~lstat,data=boston)
model1$coeff
#medv decreases as lstat increases at nearly a 1 to 1 rate, starting from an initial value of zero
summary(model1)
pred = predict(model1)
summary(pred)
predict(model1,data.frame(lstat=5),level=.95,interval="confidence")
predict(model1,data.frame(lstat=10),level=.95,interval="confidence")
predict(model1,data.frame(lstat=15),level=.95,interval="confidence")
model1$coeff
plot(model1)
plot(model1)
par(mfrow=c(2,2))
plot(model1)
model3 = lm(medv~I(1/lstat)+age,data = Boston)
summary(model2)
model2 = lm(medv~I(1/lstat),data = Boston)
model2 = lm(medv~I(1/lstat),data = Boston)
summary(model2)
summary(model3)
model4 = lm(medv~.,data=Boston)
summary(model4)
b <- lm(medv ~ poly(lstat, 2, raw=TRUE),data=Boston)
summary(b)
b <- lm(medv ~ poly(lstat, 3, raw=TRUE),data=Boston)
b <- lm(medv ~ poly(lstat, 2, raw=TRUE),data=Boston)
summary(b)
b <- lm(medv ~ poly(lstat, 3, raw=TRUE),data=Boston)
summary(b)
?loess
loess(medv~lstat,degree = 0)
loess(medv~lstat,degree = 0,data=Boston)
poly1 = loess(medv~lstat,degree = 0,data=Boston)
plot(poly1)
summary(plot1)
summary(poly1)
library(splines)
model1 = lm(y ~ bs(x, df = 10, degree = 1))
plot(poly1)
poly1 = loess(medv~lstat,degree = 0,data=Boston)
poly2 = loess(medv~lstat,degree = 1,data=Boston)
poly3 = loess(medv~lstat,degree = 2,data=Boston)
summary(poly1)
summary(poly2)
summary(poly3)
par(mfrow=c(1,1))
plot(medv~lstat,data = Boston)
lines(lstat,poly3$fit)
lines(Boston$lstat,poly3$fit)
plot_sp1=ggplot(aes(lstat,medv),data=Boston) +
geom_point() +
geom_line(aes(Boston$lstat, poly3$fitted.values))
plot_sp1
plot_sp1=ggplot(aes(x=lstat,y=medv),data=Boston) +
geom_point() +
geom_line(aes(Boston$lstat, poly3$fitted.values))
plot_sp1
plot_sp1=ggplot(aes(lstat,medv),data=Boston) +
geom_point() +
geom_line(aes(x=Boston$lstat, y=poly3$fitted.values))
plot_sp1
names(poly3)
plot_sp1=ggplot(aes(lstat,medv),data=Boston) +
geom_point() +
geom_line(aes(x=Boston$lstat, y=poly3$fitted))
names(poly3)
plot_sp1
ggplot(aes(lstat,medv),data=Boston) +
+     geom_point() +
+     geom_line(aes(x=Boston$lstat, y=poly2$fitted))
ggplot(aes(lstat,medv),data=Boston) +
geom_point() +
geom_line(aes(x=Boston$lstat, y=poly2$fitted))
ggplot(aes(lstat,medv),data=Boston) +
geom_point() +
geom_line(aes(x=Boston$lstat, y=poly1$fitted))
ggplot(aes(lstat,medv),data=Boston) +
geom_point() +
geom_line(aes(x=Boston$lstat, y=poly3$fitted))
library(splines)
lm(medv~ns(lstat,df=2),data=Boston)
plot(lstat,medv,data=Boston)
plot(medv~lstat,data=Boston)
lines(Boston$lstat,predict(spli))
spli = lm(medv~ns(lstat,df=2),data=Boston)
spli = lm(medv~ns(lstat,df=2),data=Boston)
spli = lm(medv~ns(lstat,df=2),data=Boston)
lines(Boston$lstat,predict(spli))
spli = lm(medv~ns(lstat,df=3),data=Boston)
plot(medv~lstat,data=Boston)
lines(Boston$lstat,predict(spli))
spli = lm(medv~ns(lstat,df=4),data=Boston)
plot(medv~lstat,data=Boston)
lines(Boston$lstat,predict(spli))
spli = lm(medv~ns(lstat,df=2),data=Boston)
plot(medv~lstat,data=Boston)
lines(Boston$lstat,predict(spli))
library(mgcv)
model = gam(medv ~ s(lstat), data = Boston)
model
plot(model)
par(mfrow=c(1,2))
plot(model)
plot(model, se = T, resid = T, pch = 16)
par(mfrow=c(1,2))
plot(model, se = T, resid = T, pch = 16)
plot(model)
plot(model, se = T, resid = T, pch = 8)
plot(model, se = T, resid = T, pch = 1)
plot(model, se = T, resid = T, pch = 2)
plot(model, se = T, resid = T, pch = 3)
gam.check(model)
par(mfrow=c(1,1))
gam.check(model)
gam.check(model)
par(mfrow=c(2,2))
gam.check(model)
library(mgcv)
model = gam(medv ~ s(lstat), data = Boston)
plot(model)
plot(model, se = T, resid = T, pch = 16)
par(mfrow=c(1,2))
plot(model, se = T, resid = T, pch = 16)
library(Smarket)
Smarket
library(ISLR)
data(Smarket)
head(Smarket)
stocks = glm(Direction~.,data=Smarket)
stocks = glm(Direction~.,data=Smarket,family='binomial')
class(Smarket$Direction)
summary(stocks)
stocks$coeff
summary(stocks$Direction)
summary(Smarket$Direction)
library(dplyr)
train = filter(Smarket,Year<=2005)
summary(stocks)
model.pre = predict(stocks, type = "response")
pre = ifelse(model.pre > 0.5, 1, 0)
table(pre, data$y)
table(pre,Smarket$Direction)
plot(stocks)
coef(stocks)
exp(coef(stocks))
summary(stocks)
model.pre = predict(stocks, type = "response")
pre = ifelse(model.pre > 0.5, 1, 0)
table(pre, Smarket$Direction)
stocks2 = glm(Direction~.[-Today],data = Smarket)
stocks2 = glm(Direction~[-Today],data = Smarket)
stocks2 = glm(Direction~-Today,data = Smarket)
stocks2 = glm(Direction~-Today,data = Smarket,family='binomial')
model.pre = predict(stocks2, type = "response")
pre = ifelse(model.pre > 0.5, 1, 0)
table(pre, Smarket$Direction)
head(model.pre)
summary(model.pre)
summary(stocks2)
stocks2 = glm(Direction~ lag1+lag2+lag3+lag4+lag5+Volume,data = Smarket,family='binomial')
head(Smarket)
stocks2 = glm(Direction~ Lag1+Lag2+Lag3+Lag4+Lag5+Volume+Year,data = Smarket,family='binomial')
model.pre = predict(stocks2, type = "response")
pre = ifelse(model.pre > 0.5, 1, 0)
table(pre, Smarket$Direction)
stocks = glm(Direction~.,data=Smarket,family='binomial')
stocks = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family='binomial')
model.pre = predict(stocks, type = "response")
pre = ifelse(model.pre > 0.5, 1, 0)
table(pre, Smarket$Direction)
summary(stocks)
stocks = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume+Year+Today,data=Smarket,family='binomial')
stocks = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume+Year,data=Smarket,family='binomial')
stocks = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume+Today,data=Smarket,family='binomial')
head(Smarket)
train = filter(Smarket,Year<=2005)
test = filter(Smarket,Year>2005)
dim(train)
dim(test)
summary(Smarket$year)
summary(Smarket$Year)
train = filter(Smarket,Year<2005)
test = filter(Smarket,Year>=2005)
dim(test)
glm.fit=glm(Directionâˆ¼Lag1+Lag2+Lag3+Lag4+Lag5+Volume , data=Smarket ,family=binomial,subset=train)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume , data=Smarket ,family=binomial,subset=train)
fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial,subset=train)
fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial)
fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=train,family=binomial)
probs = predict(fit,test,type='response')
table(pre, Smarket$Direction)
fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=train,family=binomial)
probs = predict(fit,test,type='response')
preds = rep("Down",252)
preds[probs>0.5]="Up"
table(preds,test$Direction)
mean(preds==test$Direction)
mean(preds!=test$Direction)
table(pre, Smarket$Direction)
mean(pre==Smarket$Direction)
table(pre, Smarket$Direction)
mean(pre==!Smarket$Direction)
mean(pre==(Smarket$Direction=="Up"))
library(ISLR)
data(Auto)
head(Auto)
mpg01 = ifelse(Auto$mpg > median(Auto$mpg), 1, 0)
head(mpg01)
mean(mpg01)
glm(mpg01~.-mpg,data=Auto,family='binomial')
glm(mpg01~ cylinders + displacement + horsepower + weight + acceleration + origin + year,data=Auto,family='binomial')
model = glm(mpg01~ cylinders + displacement + horsepower + weight + acceleration + origin + year,data=Auto,family='binomial')
summary(model)
model2 = glm(mpg01 ~ weight + year, data = Auto, family ='binomial')
summary(model2)
model2 = glm(mpg01 ~ weight + year + horsepower, data = Auto, family ='binomial')
summary(model2)
model2 = glm(mpg01 ~ weight + year + horsepower+origin, data = Auto, family ='binomial')
summary(model2)
boxplot(model2)
boxplot(mpg01 ~ weight + year + horsepower+origin, data = Auto)
par(mfrow=c(2,2))
boxplot(mpg01 ~ weight, data = Auto)
boxplot(mpg01 ~ year, data = Auto)
boxplot(mpg01 ~ horsepower, data = Auto)
boxplot(mpg01 ~ origin, data = Auto)
par(mar = rep(2, 4))
par(mfrow=c(2,2))
boxplot(mpg01 ~ weight, data = Auto)
boxplot(mpg01 ~ year, data = Auto)
boxplot(mpg01 ~ horsepower, data = Auto)
boxplot(mpg01 ~ origin, data = Auto)
par(mfrow=c(2,2))
scatterplot(mpg01 ~ weight, data = Auto)
scatterplot(mpg01 ~ year, data = Auto)
scatterplot(mpg01 ~ horsepower, data = Auto)
scatterplot(mpg01 ~ origin, data = Auto)
par(mfrow=c(2,2))
scatter.plot(mpg01 ~ weight, data = Auto)
scatter.plot(mpg01 ~ year, data = Auto)
scatter.plot(mpg01 ~ horsepower, data = Auto)
scatter.plot(mpg01 ~ origin, data = Auto)
par(mfrow=c(2,2))
plot(mpg01 ~ weight, data = Auto)
plot(mpg01 ~ year, data = Auto)
plot(mpg01 ~ horsepower, data = Auto)
plot(mpg01 ~ origin, data = Auto)
dim(Auto)
392*0.7
library(class)
?knn
mpg01
true = mpg01[mpg01>0,]
true = mpg01[mpg01>0]
neg = mpg01[mpg01<1]
true
neg = mpg01[mpg01==1]
neg
neg = mpg01==1
neg
?sample
dim(mpg01[mpg01==1])
sample(true,10)
neg = mpg01==0
true = mpg01==1
sample(true,10)
sample(true[true==TRUE],10)
sample(true[true==TRUE,],10)
shiny::runApp('Bootcamp2-Project/Shiny-Project/Sumanth_Malpractice')
53/70
70/53
shiny::runApp('Bootcamp2-Project/Shiny-Project/Sumanth_Malpractice')
70382/52787
shiny::runApp('Bootcamp2-Project/Shiny-Project/Sumanth_Malpractice')
shiny::runApp('Bootcamp2-Project/Shiny-Project/Sumanth_Malpractice')
45/700
?optim
set.seed(1)
x1 = rnorm(100)
x2 = rnorm(100, mean=x1, sd=0.1)
x3 = rnorm(100)
noise = rnorm(100)
y = 3 + x1 + x2 + noise
data = data.frame(y, x1, x2, x3)
lm(y ~ x1 + x2 + x3, data)$coef
library(MASS)
m = lm.ridge(y ~ x1 + x2 + x3, data, lambda=1)
x2y = function(x, b0, b1){
y = b0 + x%*%b1
return(y)
}
x = cbind(x1, x2, x3)
b0 = 1
b1 = c(1.5, 2, 1)
sq_error = function(x, y, b0, b1, lambda=1) {
predictions = x2y(x, b0, b1)
errors = sum((y - predictions)^2)
return(errors + lambda*sum(b1^2))
}
sq_error(x, y, b0, b1)
result = optim(c(0,0,0,0),function(b) sq_error(x,y,b[1],c(b[2],b[3],b[4])))
result$par
library(reshape2)
lambdafunc = function(lambda) {
result = optim(c(0,0,0,0),function(b) sq_error(x,y,b[1],c(b[2],b[3],b[4]),lambda))
return(result$par[2:4])
}
b1 = sapply(seq(0, 10, length=100), lambdafunc)
plotdata = data.frame(lambda=seq(0,10,length=100), t(b1))
library(ggplot2)
plotdata = melt(plotdata, id.vars='lambda')
p = ggplot(plotdata, aes(x=lambda,y=value,group=variable,color=variable)) +
geom_line() +
theme_bw()
p
plot(lm.ridge(y ~ . ,
data=data,
lambda=seq(0,5,0.1)))
select(lm.ridge(y ~ . ,
data=data,
lambda=seq(0,10,0.1)))
x
library(glmnet)
install.packages("glmnet")
library(glmnet)
shiny::runApp('Bootcamp2-Project/Shiny-Project/Sumanth_Malpractice')
shiny::runApp('Bootcamp2-Project/Shiny-Project/Sumanth_Malpractice')
library(mvtnorm)
set.seed(1)
sigma = matrix(c(1, 0.9, 0.9, 1), ncol=2)
mnorm = rmvnorm(n=100,
mean=c(0,0),
sigma=sigma)
sigma
mnorm
sigm
sigma
plot(mnorm)
plot(mnorm,asp=1)
eig = eigen(cor(mnorm))
eig
cor(mnorm)
vector1 = eig$vectors[, 1, drop=F]
vector2 = eig$vectors[, 2, drop=F]
newX = scale(mnorm) %*% vector1
newY = scale(mnorm) %*% vector2
vector1
vector2
newx
newX
plot(newX, newY, ylim=c(-2,2))
prinModel = prcomp(x=mnorm,
retx=TRUE,
center=TRUE,
scale=TRUE)
prinModel
prinModel$sdev
prinModel$rot
prinModel = prcomp(x=iris[, -5],
retx=TRUE,
center=TRUE,
scale=TRUE)
plot(prinModel$x[, 1:2],
pch=16,
col=as.numeric(iris[,5]))
prinModel$x
iris[,5]
as.numeric(iris[,5])
library(pls)
pcrModel = pcr(octane ~ NIR,
ncomp=10,
data=gasoline)
plsrModel = plsr(octane ~ NIR,
ncomp=10,
data=gasoline)
gas.cv = crossval(plsrModel, segments=10)
gas.cv
plot(MSEP(gas.cv), legendpos="topright")
?MSEP
MSEP(gas.cv)
gas.cv
refund = c('yes', 'no', 'no', 'yes', 'no', 'no', 'yes', 'no', 'no', 'no')
mstatus = c('single', 'married', 'single', 'married', 'divorced', 'married',
'divorced', 'single', 'married', 'single')
income = c(125, 100, 70, 120, 95, 60, 220, 85, 75, 90)
cheat = c('no', 'no', 'no', 'no', 'yes', 'no', 'no', 'yes', 'no', 'yes')
data = data.frame(refund, mstatus, income, cheat)
library(rpart)
data
model = rpart(cheat ~ ., data=data, control=rpart.control(minbucket=1))
model
library(rattle)
fancyRpartPlot(model)
?predict
predict(model, data=newguy)
newguy = data.frame(refund='yes', mstatus='single', income=100)
predict(model, data=newguy)
predict(model, newdata=newguy)
newguy = data.frame(refund='yes', mstatus='single', income=60)
predict(model, newdata=newguy)
newguy = data.frame(refund='yes', mstatus='single', income=120)
predict(model, newdata=newguy)
newguy = data.frame(refund='no', mstatus='single', income=120)
predict(model, newdata=newguy)
newguy = data.frame(refund='no', mstatus='single', income=5)
predict(model, newdata=newguy)
temp = list()
for(i in 1:9) {
temp[[i]] = c(rep('x',times=i), rep('y',times=10-i))
}
temp
gini = function(x) {
labelcounts = table(x)
prob = labelcounts / sum(labelcounts)
ginivalue = 1 - sum(prob^2)
return(ginivalue)
}
gini_p = gini(data$cheat)
node1 = data[data$refund=='yes', ]
node2 = data[data$refund=='no', ]
gini(node1$cheat)
gini(node1$cheat)
gini(node2$cheat)
gini_1 = gini(node1$cheat)
gini_2 = gini(node2$cheat)
gini_w = (nrow(node1)*gini_1 + nrow(node2)*gini_2) / nrow(data)
gini_gain_refund = gini_p - gini_w
gini_gain_refund
nrow(node1)*gini_1
nrow(node2)*gini_2
nrow(data)
node1 = data[data$mstatus==critic, ]
node2 = data[data$mstatus!=critic, ]
gibi
gini
gini(data$cheat)
table(cheat)
table(data$cheat)
table(data$cheat)/10
1-sum((table(data$cheat)/10)^2)
library(kntr)
library(knitr)
knit('rweek3hw2.R')
gini_continue = function(x, y, value) {
n = length(y)
gini_parent = gini(y)
subx1 = x[x<=value]
subx2 = x[x>value]
suby1 = y[x<=value]
suby2 = y[x>value]
n1 = length(suby1); n2 = length(suby2)
gini_child = (n1* gini(suby1) + n2*gini(suby2)) / n
gain = gini_parent - gini_child
return(gain)
}
result = sapply(data$income, function(x) gini_continue(data$income, data$cheat, x))
gini_gain_income = data$income[which.max(result)]; gini_gain_income
result
gini_gain_income
train = read.csv('downloads/train2.csv')
train = read.csv('downloads/train 2.csv')
View(train)
summary(train$Hazard)
summary(train$Hazard[-max(train$Hazard)])
summary(train$Hazard[-max(train$Hazard),])
levels(train$Hazard)
levels(as.factor(train$Hazard))
temp
table(temp)
gini(temp)
temp
gini
data
entropy = function(x) {
labelcounts = table(x)
prob = labelcounts / sum(labelcounts)
shannonent = -sum(prob*log(prob+1e-10, 2))
return(shannonent)
}
datamat = matrix(c(1.6, 1.2, 1, 2, 1.3, 1, 2,
1.2, 1.8, 2.1, 1.4, 1, 1, 1),
ncol=2)
labels = c(-1, -1, 1, 1, -1, -1, 1)
dataset = data.frame(datamat, labels)
dataset
library(ggplot2)
p = ggplot(dataset, aes(X1, X2, color=factor(labels))) +
geom_point(size=5) +
theme_bw()
p
calcent = function(data) {
m = ncol(data)
n = nrow(data)
labels = data[, m]
labelcounts = table(labels)
prob = labelcounts / sum(labelcounts)
shannonent = -sum(prob*log(prob,2))
return(shannonent)
}
calcent(dataset)
splitfunc = function(data, feat, thresh) {
left = dataset[data[,feat] <= thresh, ]
right = dataset[data[,feat] > thresh, ]
return(list(left=left, right=right))
}
dataset
splitfunc(dataset,X1,1)
splitfunc(dataset,dataset$X1,1)
splitfunc(dataset,1,1)
splitfunc(dataset,2,1)
shiny::runApp('Bootcamp2-Project/Shiny-Project/Sumanth_Malpractice')
shiny::runApp('Bootcamp2-Project/Shiny-Project/Sumanth_Malpractice')
